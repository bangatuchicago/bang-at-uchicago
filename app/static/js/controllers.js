// Generated by CoffeeScript 1.6.2
var BangCtrl, BangMatchCtrl, BangScoreCtrl, ForgotPassCtrl, LoginCtrl, LogoutCtrl, MostBangableCtrl, MyAccountCtrl, NavCtrl, NullCtrl, RegisterCtrl, ResetPassCtrl, SplashCtrl,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

NullCtrl = function($rootScope) {};

SplashCtrl = function($rootScope, $location) {
  if ($rootScope.user) {
    $location.path("/who/i/want/to/bang");
    $location.replace();
    return;
  }
  return $rootScope.showNav = false;
};

NavCtrl = function($rootScope, $scope, $location) {
  $scope.pages = [
    {
      name: "My Bang List",
      url: "#/who/i/want/to/bang"
    }, {
      name: "My Bang Matches",
      url: "#/also/want/to/bang"
    }, {
      name: "My Bangability Score",
      url: "#/my/bangability"
    }
  ];
  return $scope.activeCSS = function(url) {
    if ("#" + $location.path() === url) {
      return "active";
    }
    return "";
  };
};

RegisterCtrl = function($rootScope, $scope, $http, $location) {
  if ($rootScope.user) {
    $location.path("/who/i/want/to/bang");
    $location.replace();
    return;
  }
  $rootScope.showNav = false;
  $scope.user = {
    username: "",
    password: "",
    passwordConfirm: ""
  };
  $scope.errors = null;
  $scope.resetError = function(field, key) {
    return $scope.form[field].$setValidity(key, true);
  };
  return $scope.submit = function() {
    var data;

    data = angular.copy($scope.user);
    return $http.post("/register/", data).success(function() {
      $scope.errors = null;
      return $location.path("/wait/to/bang");
    }).error(function(data) {
      $scope.errors = data;
      if ('username' in data) {
        $scope.form.username.$setValidity('invalidCnetId', false);
      }
      if ('password' in data) {
        return $scope.form.password.$setValidity('invalid', false);
      }
    });
  };
};

LoginCtrl = function($rootScope, $scope, $http, $location) {
  if ($rootScope.user) {
    $location.path("/who/i/want/to/bang");
    $location.replace();
    return;
  }
  $rootScope.showNav = false;
  $scope.user = {
    username: "",
    password: ""
  };
  $scope.errors = null;
  return $scope.submit = function() {
    return $http.post("/login/", $scope.user).success(function(data) {
      $scope.errors = null;
      $rootScope.user = data;
      $rootScope.show_hidden_pages = (__indexOf.call(data.groups, 'inner_circle') >= 0);
      return $location.path("/who/i/want/to/bang");
    }).error(function(data) {
      return $scope.errors = data;
    });
  };
};

LogoutCtrl = function($rootScope, $http, $location) {
  return $http.get("/logout/").success(function() {
    $rootScope.user = null;
    return $location.path("/");
  });
};

ForgotPassCtrl = function($rootScope, $scope, $http, $location) {
  if ($rootScope.user) {
    $location.path("/who/i/want/to/bang");
    $location.replace();
    return;
  }
  $rootScope.showNav = false;
  $scope.resetError = function() {
    return $scope.form.username.$setValidity('invalid', true);
  };
  return $scope.submit = function() {
    return $http.post("/forgot-password/", {
      username: $scope.username
    }).success(function() {
      return $scope.success = true;
    }).error(function(data) {
      $scope.success = false;
      $scope.errors = data;
      return $scope.form.username.$setValidity('invalid', false);
    });
  };
};

ResetPassCtrl = function($rootScope, $scope, $http, $location) {
  var key;

  if ($rootScope.user) {
    $location.path("/who/i/want/to/bang");
    $location.replace();
    return;
  }
  $rootScope.showNav = false;
  key = $location.search().key;
  $scope.data = {
    key: key,
    password: "",
    passwordConfirm: ""
  };
  $scope.resetError = function(field, key) {
    return $scope.form[field].$setValidity(key, true);
  };
  return $scope.submit = function() {
    return $http.post("/reset-password/", $scope.data).success(function() {
      return $scope.success = true;
    }).error(function(data) {
      $scope.errors = data;
      if ('password' in data) {
        return $scope.form.password.$setValidity('invalid', false);
      }
    });
  };
};

MyAccountCtrl = function($rootScope, $scope, $http, $location) {
  if (!$rootScope.user) {
    $location.path("/");
    $location.replace();
    return;
  }
  $rootScope.showNav = false;
  $scope.resetError = function(form, field, key) {
    return $scope[form][field].$setValidity(key, true);
  };
  $scope.profile = {};
  $http.get("/profile/").success(function(data) {
    return $scope.profile = data;
  });
  $scope.updateProfile = function() {
    return $http.put("/profile/", {
      optout: parseInt($scope.profile.optout)
    }).success(function() {
      return $scope.profileUpdated = true;
    }).error(function() {
      return $scope.profileUpdateError = false;
    });
  };
  $scope.passData = {};
  return $scope.changePassword = function() {
    return $http.post("/change-password/", $scope.passData).success(function() {
      $scope.pwChanged = true;
      return $scope.passData = {};
    }).error(function(data) {
      $scope.pwChanged = false;
      $scope.pwChangeErrors = data;
      if ('old_password' in data) {
        $scope.pwChangeForm.old_password.$setValidity('invalid', false);
      }
      if ('password' in data) {
        return $scope.pwChangeForm.password.$setValidity('invalid', false);
      }
    });
  };
};

BangCtrl = function($rootScope, $scope, $http, $location) {
  if (!$rootScope.user) {
    $location.path("/");
    $location.replace();
    return;
  }
  $rootScope.showNav = true;
  $scope.searchQuery = {
    cnetid: "",
    first_name: "",
    last_name: ""
  };
  $scope.searchQueryError = null;
  $scope.searchResults = null;
  $scope.showFap = false;
  $scope.submitText = "Hit me!";
  $scope.myBangs = [];
  $scope.isFormValid = function() {
    return $scope.searchQuery.cnetid || ($scope.searchQuery.first_name && $scope.searchQuery.last_name);
  };
  $scope.search = function() {
    $scope.showFap = false;
    if ($scope.searchQuery.cnetid || ($scope.searchQuery.first_name && $scope.searchQuery.last_name)) {
      if ($scope.searchQuery.cnetid === $rootScope.user.cnetid) {
        $scope.showFap = true;
        return;
      }
      $scope.searchQueryError = null;
      return $http.get("/bangs/search/", {
        params: $scope.searchQuery
      }).success(function(data) {
        $scope.searchResults = data;
        $scope.searchQueryError = null;
        if (!data.length && ($scope.searchQuery.first_name === $rootScope.user.first_name && $scope.searchQuery.last_name === $rootScope.user.last_name)) {
          $scope.showFap = true;
        }
        return $scope.submitText = "Hit me one more time, baby!";
      }).error(function(data) {
        return $scope.searchQueryError = data;
      }).then(function() {
        return $scope.searchQuery = {
          cnetid: "",
          first_name: "",
          last_name: ""
        };
      });
    } else {
      return $scope.searchQueryError = true;
    }
  };
  $scope.addBang = function(user) {
    return $http.post("/bangs/new/", {
      id: user.id
    }).success(function(data) {
      $scope.myBangs.unshift(data);
      return $scope.searchResults.splice($scope.searchResults.indexOf(user), 1);
    });
  };
  $scope.unBang = function(bang) {
    if (bang.can_unbang) {
      return $http.post("/bangs/delete/", {
        id: bang.id
      }).success(function() {
        return $scope.myBangs.splice($scope.myBangs.indexOf(bang), 1);
      }).error(function(data, status) {
        if (status === 404) {
          return $scope.myBangs.splice($scope.myBangs.indexOf(bang), 1);
        }
      });
    }
  };
  $scope.getTooltip = function(bang) {
    if (bang.can_unbang) {
      return "Don't want to bang this person anymore? Click to remove them from your Bang List.";
    } else {
      return "You can't pull out yet, you're not done! Wait 24 hours to remove this user from your Bang List.";
    }
  };
  return $http.get("/my/bangs/").success(function(data) {
    return $scope.myBangs = data;
  });
};

BangMatchCtrl = function($rootScope, $scope, $http, $location) {
  if (!$rootScope.user) {
    $location.path("/");
    $location.replace();
    return;
  }
  $rootScope.showNav = true;
  $http.get("/my/bangs/matches/").success(function(data) {
    return $scope.myBangMatches = data;
  });
  return $scope.getReadCSS = function(read) {
    if (read) {
      return '';
    }
    return 'success';
  };
};

BangScoreCtrl = function($rootScope, $scope, $http, $location) {
  if (!$rootScope.user) {
    $location.path("/");
    $location.replace();
    return;
  }
  $rootScope.showNav = true;
  return $http.get("/my/bangability/").success(function(data) {
    return $scope.scoreData = data;
  });
};

MostBangableCtrl = function($rootScope, $scope, $http, $location) {
  if (!$rootScope.user || !$rootScope.show_hidden_pages) {
    $location.path("/");
    $location.replace();
    return;
  }
  $rootScope.showNav = false;
  return $http.get("/most/bangable/").success(function(data) {
    return $scope.users = data;
  });
};
